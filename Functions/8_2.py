"""
Для работы небольшого магазинчика вас попросили сделать небольшой набор функций, обеспечивающих работу с чеками. В
качестве пробной версии вам нужно реализовать всего два действия: добавление покупки к набору покупаемых товаров функция
add_item(itemName, itemCost), и печать чека - функция print_receipt(). После того как чек напечатан должно быть возможно
 вводить новый список товаров.
По правилам оформления документов в каждом чеке вы должны напечатать сначала номер чека (нумерация чеков начинается с
единицы) и число товаров, затем список товаров с ценами и в конце — итоговую стоимость. Из-за того, что вы не знаете
число товаров, пока кассир не «пробьет» последний товар, нельзя печатать чек по мере ввода товаров. Приходится сначала
добавить все необходимые товары и только затем печатать весь чек целиком. В конце чека печатается черта (состоящая из
пяти знаков минус), по которой он отрывается от ленты.
Форматирование сделайте по шаблону в примере.
В случае, когда чек пуст, print_receipt не должна печатать чек. Не забудьте, что после того как чек напечатан, набор
 выбранных товаров должен обнулиться, чтобы можно было вводить товары для нового чека.
"""

with open('utils/file_8_2_answer.txt', 'w') as f:
    f.write('')

cart = []
check_num = 1
def add_item(item_name, item_cost):
    cart.append((item_name, item_cost))

def print_receipt():
    global cart
    global check_num
    output = f"Чек {check_num}. Всего предметов: {len(cart)}\n"
    sum = 0
    for item in cart:
        output += f"{item[0]} - {item[1]}\n"
        sum += item[1]
    output += f"Итого: {sum}\n-----"
    cart = []
    check_num += 1
    with open('utils/file_8_2_answer.txt', 'a') as f:
        f.write(output)

try:
    with open('utils/file_8_2.txt', encoding='utf-8') as f:
        text = f.read()
        rows = text.split("\n")
    f.close()
except Exception:
    raise Exception("Файл не найден")

for row in rows:
    if row == "#":
        cart = []
    elif not (row[:13] == "print_receipt" and len(cart) == 0):
        exec(row)
